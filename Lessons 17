/*
    Write a program in C# Sharp to make such a pattern like right angle triangle with number increased by 1.
    output
    1
    2 3
    4 5 6
    7 8 9 10 
*/

{
    int i, j, rows = 4, k = 1;
    for (i = 1; i <= rows; i++)
    {
        for (j = 1; j <= i; j++)
            Console.Write("{0} ", k++);
        Console.Write("\n");
    }
}

/*
   Write a program in C# Sharp to make such a pattern like a pyramid with numbers increased by 1.

       1 
      2 3 
     4 5 6 
    7 8 9 10
*/

{
    int i, j, spc, rows, k, t = 1;
    rows = 4;
    spc = rows;
    for (i = 1; i <= rows; i++)
    {
        for (k = spc; k >= 1; k--)
        {
            Console.Write(" ");
        }
        for (j = 1; j <= i; j++)
            Console.Write("{0} ", t++);
        Console.Write("\n");
        spc--;
    }
}

/*
    მოცემულია მართკუთხა უჯრედოვანი დაფა, რომელიც შედგება M×N უჯრედისაგან. 
    მასთან ერთად მოცემულია 2×1 ზომის დომინოს ქვები შეუზღუდავი რაოდენობით. საჭიროა 
    დაფის დაფარვა დომინოს ქვებით ისე, რომ შესრულდეს შემდეგი პირობები: 
        1. დომინოს ყოველი ქვა მთლიანად ფარავს დაფის ორ უჯრას;
        2. ქვების არცერთი წყვილი არ ფარავს ერთმანეთს (თუნდაც ნაწილობრივ);
        3. ყოველი ქვა მთლიანად დევს დაფის შიგნით. კიდესთან შეხება დასაშვებია.
    დომინოს ქვების შეტრიალება შესაძლებელია. გამოთვალეთ ქვების მაქსიმალური 
    რაოდენობა, რომელიც დაფაზე დაეტევა.
    input     output
    2 4    |  4
    3 3    |  4
*/

{  
    int m, n;
    cin >> m >> n;
    cout << m * n / 2;
}

/*
    ვასოს რომანტიკა უყვარს, ამიტომ გადაწყვიტა საახალწლოდ ოთახი სანთლებით 
    გაანათოს. მას აქვს a ცალი სანთელი. როცა ვასო ანთებს ახალ სანთელს, ის იწვის ზუსტად 1 
    საათი და შემდეგ ქრება. b ცალი ჩამქრალი სანთლიდან ვასო აკეთებს ერთ სანთელს, რომელიც
    შეუძლია ახალივით გამოიყენოს.
    ახლა ვასოს აინტერესებს, რამდენ საათის განმავლობაში ეყოფა მას თავისი სანთლები, 
    თუკი ოპტიმალურად იმოქმედებს. 
         (განმარტება). პირველ მაგალითში ვასო აანთებს სანთლებს 4 საათის განმავლობაში და 4 
    დამწვარი სანთლიდან გააკეთებს ორ ახალს და როცა ეს ორიც დაიწვება, მათი ნარჩენიდან 
    გააკეთებს კიდევ 1 ახალს, რაც ჯამში 7 საათის განმავლობაში გაანათებს. 
    input    output
    4 2   |  7
    6 3   |  8
*/

{
    int a, b;
    cin>> a >> b;
    cout<< (a * b - 1) / (b - 1) <<endl;
}
