[Computer Structure] = კომპიუტერის არქიტექტურა არის ტერმინი, რომელიც აღწერს ტექნიკის სხვადასხვა ასპექტს, 
რომლებიც საჭიროა კომპიუტერული სისტემის მუშაობისთვის.

[CPU]...[Central processing unit] = პროცესორი არის ელექტრონული სქემა კომპიუტერში, რომელიც ასრულებს ინსტრუქციებს.
[GPU]...[Graphics processing unit] = შეუძლია მონაცემთა მრავალი ნაწილი ერთდროულად დაამუშაოს.
[Chipset] = მონაცემთა ნაკადის მართვის სისტემა, რომელიც მართავს მონაცემთა ნაკადს პროცესორს, მეხსიერებას და პერიფერიულ მოწყობილობებს შორის. 
[RAM]...[Random access memory] = გამოიყენება სამუშაო მონაცემებისა და მანქანური კოდის შესანახად.
HDD, SSD
Function
[Human & Computer as a Function] = კომპიუტერის მსგავსად, ადამიანის ტვინი აწვდის, ამუშავებს, ინახავს და გამოაქვს ინფორმაცია.
[Logic, Logical Gates] = ლოგიკური ფუნქციის განმახორციელებელი გამოთვლის ან ფიზიკური ელექტრონული მოწყობილობის.

[Transistor] = ტრანზისტორი არის ნახევარგამტარული მოწყობილობა, რომელიც გამოიყენება 
ელექტრონული სიგნალებისა და ელექტროენერგიის გასამდიდრებლად ან გადართვისთვის.

[Programming Language] = პროგრამირების ენები გამოიყენება კომპიუტერულ პროგრამირებაში ალგორითმების განსახორციელებლად.
[Machine Code] = კომპიუტერული პროგრამა, დაწერილი მანქანების ენაზე. 
[Compiler] = თარგმნის კოდს მანქანისთვის გასაგებ ენაზე.
[Pulse code modulation] = ვიდეოების ხმა ინახება ორობით კოდში რომელსაც, პულსის კოდის მოდულაცია ეწოდება.
[Unsigned integer] = ტერმინი "Unsigned" მიუთითებს ცვლადზე, რომელსაც მხოლოდ დადებითი რიცხვების ჩატევა შეუძლია.
[Signed integer]   = "Signed" კომპიუტერულ კოდში მიუთითებს იმაზე, რომ ცვლადს შეუძლია ჰქონდეს უარყოფითი და დადებითი მნიშვნელობები.
[.NET Framework] =  გამოიყენება პროგრამული უზრუნველყოფის პროგრამების შესაქმნელად და გასაშვებად.
[Runtime (CLR)] = ეს არის სისტემა, რომელიც მართავს თქვენი პროგრამის შესრულებას.
[Class] = არის ობიექტზე ორიენტირებული კონსტრუქცია, რომელიც ეხმარება პროგრამებს ორგანიზებაში.
[Microsoft Intermediate]
[MSIL] = განსაზღვრავს პორტატულ ასამბლეის ენას
[OOP (Object-oriented programming)] = მონაცემთა კონტროლი მონაცემთა ხელმისაწვდომობაზე

[Encapsulation] = არის პროგრამირების მექანიზმი, რომელიც აერთიანებს კოდს და მის მონაცემებს,
მანიპულირებს და ეს იცავს როგორც გარე ჩარევას, ასევე ბოროტად გამოყენებას.

[Polymorphism] = (ბერძნულიდან, რაც ნიშნავს "მრავალ ფორმას") რომელიც საშუალებას აძლევს ერთ ინტერფეისს
მოქმედებების ზოგად კლასზე წვდომისათვის.
[fractional component] = არაუარყოფითი დადებითი რიცხვის, წილადის ნაწილი ან ათობითი ნაწილი
Condition1 && Condition2 = როდესაც && გამოიყენება, მაშინ პირველი პირობა მოწმდება და თუ იგი მცდარი აღმოჩნდა, მაშინ მეორე პირობა არ შემოწმდება
Condition1 & Condition2 = როდესაც & გამოიყენება, მაშინ ორივე პირობა შემოწმებულია თითოეულ შემთხვევაში.
Shorthand(სტენოგრამი) = არის შემოკლებით დაწერილი სიმბოლური მეთოდი. [x += 10]

{
    Algorithm
    Roslyn = კომპილატორი
    Variable = ცვლადი
    Variable Declaration 
    Variable Assignment
    Assignment Operator
    Variable Type
    Variable Name
    Variable Initialisation
    Literals 
    Operators 
    Expression = გამოსახულება
    Value = მნიშვნელობა
    ---------------------------
    object = არის მშობელი ყველა სხვა დანარჩენი ტიპების.
    dynamic = კომპილაციის დროს გამოყავს ტიპები, თუ რა ტიპისაა ცვლადი
    Convert.Toint32
    Parse
    int.Tryparse(str, out a) = გვერდს უვლის ექსეფშენს, Try Catch, Exception
    @identifier = იდენტიფიკატორი არის სახელი, რომელიც ენიჭება მეთოდს, ცვლადს ან მომხმარებლის მიერ განსაზღვრულ სხვა ნივთს.
    Operands = რომელზეც ხდება ზემოქმედება
    Hardcode = კონტეინერის გარეშე მინიჭებული მნიშვნელობა
    Concatenate = დამაკავშირებელი
    Unicode
    Hexadecimal Literals = 0xFF, (15 x 16 + F)
    Cast = (target-type) expression
    y = x++; // postfix form = ჯერ ზრდის X მნიშვნელობას შემდეგ ამატებს Y
    y = ++x; // prefix form  = ჯერ X მნიშვნელობას უმატებს X მნიშვნელობას და შემდეგ ამატებს Y
      
}
|
{
     {0} or {1}                   =  ინდექსები
     {0,10} or {1,5}              =  დიაპაზონი
     {0:###,###.##}, 123456.56    =  123,456.56
     (decimal)
     {0:C}", balance, 12323.09m   =  $12,323.09 
     {0:#.##}, 10.0 / 3.0         =  3,33
}

    Arithmetic Operators
        +, -, *, /, %
    Assignment Operator
        =
    Relational 
        <, >, !=, ==
    Logical Operator
        &&, ||
    Bitwise Operator
        &, |, ^, >>, <<, ~
    Ternary Operator
        Exp1 ? Exp2 : Exp3;
    
        
Expression
    Expr<int>
    Expr<bool>
 
Types
  Numbers
    int - { -x, -1, 0, 1, 2, +x }
  Text
  
  Boolean
    bool - { true, false }
    
Code Block
Case Sensitive
Debug
